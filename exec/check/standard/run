#!/bin/sh
#
# 评测提交的脚本
#
# 用法：$0 <std.in> <std.out> <timelimit> <workdir> <run> <compare>
#
# <std.in>       标准输入数据文件的绝对路径
# <std.out>      标准输出数据文件的绝对路径
# <timelimit>    运行时间限制，格式为 %d:%d，如 1:3 表示测试点时间限制
#                为 1s，如果运行时间超过 3s 则结束程序
# <workdir>      程序的工作文件夹，为了保证安全，请务必将运行路径设置
#                为空文件夹，特别是保证不可以包含标准输出文件
# <run>          运行程序的脚本的绝对路径
# <compare>      比较程序/脚本的绝对路径
# <compare-args> 比较程序的参数
#
# 默认的比较脚本都可以放在配置服务中

set -e
trap 'cleanup ; error' EXIT

cleanup ()
{
    # 删除创建过的文件
    if [ "$WORKDIR" ]; then
        if [ -f "$WORKDIR/testdata.in" ]; then
            rm -f "$WORKDIR/testdata.in"
            ln -s "$TESTIN" "$WORKDIR/testdata.in"
        fi
        if [ -f "$WORKDIR/testdata.out" ]; then
            rm -f "$WORKDIR/testdata.out"
            ln -s "$TESTOUT" "$WORKDIR/testdata.out"
        fi
    fi

    if [ -s runguard.err ]; then
        echo "************* runguard error *************" >> system.out
        cat runguard.err >> system.out
    fi
}

cleanexit ()
{
    set +e
    trap - EXIT

    cleanup

    exit $1
}

# 导入 runcheck 函数
. "$JUDGE_UTILS/utils.sh"

CPUSET=""
CPUSET_OPT=""
OPTINT=1
while getopts "n:" opt; do
    case $opt in
        n)
            OPTSET="$OPTARG"
            ;;
        :)
            >&2 echo "Option -$OPTARG requires an argument."
            ;;
    esac
done

shift $((OPTIND-1))
[ "$1" == "--" ] && shift

if [ -n "$CPUSET" ]; then
    CPUSET_OPT="-P $CPUSET"
fi

LOGFILE="$LOGDIR/judge.$(hostname | cut -d . -f 1).log"
LOGLEVEL=$LOG_DEBUG
PROGNAME="$(basename "$0")"

if [ "$DEBUG" ]; then
    export VERBOSE=$LOG_DEBUG
else
    export VERBOSE=$LOG_ERR
fi




TESTIN="$1"; shift
TESTOUT="$1"; shift
TIMELIMIT="$1"; shift
WORKDIR="$1"; shift
RUN_SCRIPT="$1"
COMPARE_SCRIPT="$2"
COMPARE_ARGS="$3"

[ -r "$TESTIN" ] || error "input data does not exist: $TESTIN"
[ -r "$TESTOUT" ] || error "output data does not exist: $TESTOUT"
if [ ! -d "$WORKDIR" ] || [ ! -w "$WORKDIR" ] || [ ! -x "$WORKDIR" ]; then
    error "Working directory does not exist: $WORKDIR"
fi

[ -x "$WORKDIR/$PROGRAM" ] || error "Program does not exist"
[ -x "$COMPARE_SCRIPT" ] || error "Compare script does not exist"
[ -x "$RUN_SCRIPT" ] || error "Run script does not exist"
[ -x "$RUNGUARD" ] || error "runguard does not exist"

cd "$WORKDIR"

chmod a+x "$WORKDIR" "$WORKDIR/run"
touch judge.out
touch program.out program.err
touch program.meta runguard.err
touch compare.meta compare.err

cp "$TESTIN" "./testdata.in"

# 检查运行脚本
cp -p "$RUN_SCRIPT" ./run
chmod a+rx ./run

runcheck ./run testdata.in program.out \
    $GAINROOT "$RUNGUARD" ${DEBUG:+-v} $CPUSET_OPT \
    --nproc=$PROCLIMIT \
    --no-core --streamsize=$FILELIMIT \
    --user "$RUNUSER" \
    --group "$RUNGROUP" \
    --cpu-time $TIMELIMIT \
    --wall-time $TIMELIMIT \
    --memory-limit $MEMLIMIT \
    --file-limit $FILELIMIT \
    --stderr program.err \
    --outmeta program.meta -- \
    "$PREFIX/$PROGRAM" 2>runguard.err

# 比较选手程序输出
logmsg $LOG_INFO "Comparing output"
cp "$TESTOUT" "$WORKDIR/testdata.out"

exitcode=0
runcheck \
    $GAINROOT "$RUNGUARD" ${DEBUG:+-v} $CPUSET_OPT \
    --user "$RUNUSER" \
    --group "$RUNGROUP" \
    --memory-limit $SCRIPTMEMLIMIT \
    --wall-time $SCRIPTTIMELIMIT \
    --file-limit $SCRIPTFILELIMIT \
    --outmeta compare.meta \
    -- \
    "$COMPARE_SCRIPT" testdata.in program.out testdata.out > compare.tmp 2>&1

logmsg $LOG_DEBUG "checking compare script exit-status: $exitcode"
