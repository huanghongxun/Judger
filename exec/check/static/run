#!/bin/bash
#
# 静态测试脚本
#
# 用法：$0 <datadir> <timelimit> <chrootdir> <workdir> <run-uuid> <run> <compare> <source files> <assist files>
#
# <datadir>      此程序不使用数据
# <timelimit>    此程序受 SCRIPTTIMELIMIT 时限限制
# <chrootdir>    子环境
# <workdir>      程序的工作文件夹，为了保证安全，请务必将运行路径设置
#                为空文件夹，特别是保证不可以包含标准输出文件
# <run-uuid>     运行的 uuid，用于索引运行文件夹位置
# <run>          此项将被忽略，此程序不使用运行脚本
# <compare>      此项将被忽略，此程序不使用比较脚本
# <source-files> 源文件集，使用 : 隔开，如 a.cpp:b.cpp
# <assist-files> 头文件集，使用 : 隔开，如 a.hpp:b.hpp
#
# 必须包含的环境变量：
#   RUNGUARD        runguard 的路径
#   RUNUSER         选手程序运行的账户
#   RUNGROUP        选手程序运行的账户组
#   SCRIPTMEMLIMIT  比较脚本运行内存限制
#   SCRIPTTIMELIMIT 比较脚本执行时间
#   SCRIPTFILELIMIT 比较脚本输出限制

set -e
trap 'cleanup ; error' EXIT

cleanup ()
{
    # 删除创建过的文件

    if [ -s runguard.err ]; then
        echo "************* runguard error *************" >> system.out
        cat runguard.err >> system.out
    fi
}

cleanexit ()
{
    set +e
    trap - EXIT

    cleanup

    exit $1
}

# 导入 runcheck 函数
. "$JUDGE_UTILS/utils.sh"
. "$JUDGE_UTILS/logging.sh"
. "$JUDGE_UTILS/chroot_setup.sh"

CPUSET=""
CPUSET_OPT=""
OPTINT=1
while getopts "n:" opt; do
    case $opt in
        n)
            OPTSET="$OPTARG"
            ;;
        :)
            >&2 echo "Option -$OPTARG requires an argument."
            ;;
    esac
done

shift $((OPTIND-1))
[ "$1" == "--" ] && shift

if [ -n "$CPUSET" ]; then
    CPUSET_OPT="-P $CPUSET"
fi

LOGFILE="$LOGDIR/judge.$(hostname | cut -d . -f 1).log"
LOGLEVEL=$LOG_DEBUG
PROGNAME="$(basename "$0")"

if [ "$DEBUG" ]; then
    export VERBOSE=$LOG_DEBUG
else
    export VERBOSE=$LOG_ERR
fi

GAINROOT="sudo -n"

[ $# -ge 9 ] || error "not enough arguments"

DATADIR="$1"; shift
TIMELIMIT="$1"; shift
CHROOTDIR="$1"; shift
WORKDIR="$1"; shift
RUN_UUID="$1"; shift
RUN_SCRIPT="$1"; shift
COMPARE_SCRIPT="$1"; shift
SOURCE_FILES="$1"; shift
ASSIST_FILES="$1"

if [ ! -d "$WORKDIR" ] || [ ! -w "$WORKDIR" ] || [ ! -x "$WORKDIR" ]; then
    error "Working directory does not exist: $WORKDIR"
fi

[ -x "$RUNGUARD" ] || error "runguard does not exist"

chmod a+x "$WORKDIR"

# 检查运行脚本

RUNDIR="$WORKDIR/run-$RUN_UUID"
mkdir -p "$RUNDIR"
chmod a+rwx "$RUNDIR"

cd "$RUNDIR"

touch judge.out
touch program.out program.err
touch program.meta runguard.err
touch compare.meta compare.err

mkdir -m 0777 -p "$RUNDIR/run" # 运行的临时文件都在这里
mkdir -m 0777 -p "$RUNDIR/feedback"
mkdir -m 0777 -p "$RUNDIR/work"
mkdir -m 0777 -p "$RUNDIR/work/judge"
mkdir -m 0777 -p "$RUNDIR/merged"
# 将测试数据文件夹（内含输入数据，且其中 testdata.in 为标准输入数据文件名），编译好的程序，运行文件夹通过 overlayfs 绑定
mount -t aufs none -odirs="$RUNDIR/run"=rw:"$WORKDIR/compile"=ro:"$TESTIN"=ro "$RUNDIR/work/judge"
mount -t aufs none -odirs="$RUNDIR/work"=rw:"$CHROOTDIR"=ro "$RUNDIR/merged"

chroot_start "$CHROOTDIR" "$RUNDIR/merged"

IFS=':' read -ra SRC <<< "$SOURCE_FILES"
IFS=':' read -ra HDR <<< "$ASSIST_FILES"

# 假如 ASSIST_FILES 为 a.hpp b.hpp，那么 INC 为 -I a.hpp -I b.hpp
INC=()
for i in "${HDR[@]}"; do INC+=(-I); INC+=($i); done

runcheck $GAINROOT "$RUNGUARD" ${DEBUG:+-v} $CPUSET_OPT \
    --root "$RUNDIR/merged" \
    --work /judge \
    --no-core-dumps \
    --user "$RUNUSER" \
    --group "$RUNGROUP" \
    --memory-limit "$SCRIPTMEMLIMIT" \
    --wall-time "$SCRIPTTIMELIMIT" \
    --file-limit "$SCRIPTFILELIMIT" \
    --standard-output-file oclint.json
    --out-meta oclint.meta -- \
    oclint "${SRC[@]}" --report-type=json -- -c -std=c++2a "${INC[@]}" > compare.tmp 2>&1

chroot_stop "$CHROOTDIR" "$RUNDIR/merged"

force_umount "$RUNDIR/work/judge"
force_umount "$RUNDIR/work/run"
force_umount "$RUNDIR/merged"
rm -rf "$RUNDIR/run"
rm -rf "$RUNDIR/merged"
rm -rf "$RUNDIR/work"
# RUNDIR 还剩下 program.meta, program.err, system.out, runguard.err 供评测客户端检查
# RUNDIR 由评测客户端删除

if [ ! -r program.meta ]; then
    error "'program.meta' is not readable"
fi

echo "Checking program run status" >> system.out

timeused=$(grep '^time-used: '    program.meta | sed 's/time-used: //'   )
cputime=$( grep '^cpu-time: '     program.meta | sed 's/cpu-time: //'    )
walltime=$(grep '^wall-time: '    program.meta | sed 's/wall-time: //'   )
progexit=$(grep '^exitcode: '     program.meta | sed 's/exitcode: //'    )
stdout=$(  grep '^stdout-bytes: ' program.meta | sed 's/stdout-bytes: //')
stderr=$(  grep '^stderr-bytes: ' program.meta | sed 's/stderr-bytes: //')
memused=$( grep '^memory-bytes: ' program.meta | sed 's/memory-bytes: //')
signal=$(  grep '^signal: '       program.meta | sed 's/signal: //'      )
resource_usage="\
runtime: ${cputime}s cpu, ${walltime}s wall
memory used: ${memused} bytes"

if grep '^time-result: .*timelimit' program.meta >/dev/null 2>&1; then
    echo "Time Limit Exceeded" >> system.out
    echo "$resource_usage" >> system.out
    cleanexit ${E_TIME_LIMIT:-1}
fi

if grep -E '^output-truncated: ([a-z]+,)*stdout(,[a-z]+)*' program.meta >/dev/null 2>&1; then
    echo "Output Limit Exceeded" >> system.out
    echo "$resource_usage" >> system.out
    cleanexit ${E_OUTPUT_LIMIT:-1}
fi

# 脚本将读入 oclint.json 并生成 report.txt 和 score.txt
runcheck python3 "$PROGNAME/process.py" oclint.json feedback/report.txt feedback/score.txt 2>&1 >> system.out
case $exitcode in
    0)
        echo "Accepted" >> system.out
        echo "$resource_usage" >> system.out
        cleanexit ${E_ACCEPTED:-1}
        ;;
    1)
        echo "Wrong Answer" >> system.out
        echo "$resource_usage" >> system.out
        cleanexit ${E_WRONG_ANSWER:-1}
        ;;
    3)
        echo "Partial Correct" >> system.out
        echo "$resource_usage" >> system.out
        cleanexit ${E_PARTIAL_CORRECT:-1}
        ;;
    *)
        echo "Comparing failed with exitcode $exitcode" >> system.out
        cleanexit ${E_INTERNAL_ERROR:-1}
        ;;
esac
