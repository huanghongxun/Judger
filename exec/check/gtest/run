#!/bin/bash
#
# Google Test 测试脚本
#
# 用法：$0 <datadir> <timelimit> <chrootdir> <workdir> <run-uuid>
#
# <datadir>      此程序不使用数据
# <timelimit>    此程序受 SCRIPTTIMELIMIT 时限限制
# <chrootdir>    子环境
# <workdir>      程序的工作文件夹，为了保证安全，请务必将运行路径设置
#                为空文件夹，特别是保证不可以包含标准输出文件
# <run-uuid>     运行的 uuid，用于索引运行文件夹位置
#
# 必须包含的环境变量：
#   RUNGUARD        runguard 的路径
#   RUNUSER         选手程序运行的账户
#   RUNGROUP        选手程序运行的账户组

# 导入比较脚本，功能是初始化日志、处理命令行参数、并对参数进行初步检查
. "$JUDGE_UTILS/check_helper.sh"

TESTIN="$DATADIR/input"
TESTOUT="$DATADIR/output"

[ -d "$TESTIN" ] || error "input data does not exist: $TESTIN"
[ -d "$TESTOUT" ] || error "output data does not exist: $TESTOUT"
if [ ! -d "$WORKDIR" ] || [ ! -w "$WORKDIR" ] || [ ! -x "$WORKDIR" ]; then
    error "Working directory does not exist: $WORKDIR"
fi

PROGRAM="compile/run"
[ -x "$WORKDIR/$PROGRAM" ] || error "Program does not exist"

touch judge.out
touch program.out program.err
touch program.meta runguard.err
touch compare.meta compare.err

mkdir -m 0777 -p run # 运行的临时文件都在这里
mkdir -m 0777 -p feedback
mkdir -m 0777 -p work
mkdir -m 0777 -p work/judge
mkdir -m 0777 -p merged
# 将测试数据文件夹（内含输入数据，且其中 testdata.in 为标准输入数据文件名），编译好的程序，运行文件夹通过 overlayfs 绑定
$GAINROOT mount -t aufs none -odirs=run=rw:"$WORKDIR/compile"=ro:"$TESTIN"=ro work/judge
$GAINROOT mount -t aufs none -odirs=work=rw:"$CHROOTDIR"=ro merged

chroot_start "$CHROOTDIR" merged

# 我们不检查选手程序的返回值，比如 C 程序的 main 函数没有写 return 会导致返回值非零，这种不是崩溃导致的
runcheck $GAINROOT "$RUNGUARD" ${DEBUG:+-v} $CPUSET_OPT $MEMLIMIT_OPT $FILELIMIT_OPT $PROCLIMIT_OPT \
    --root merged \
    --work /judge \
    --no-core-dumps \
    --user "$RUNUSER" \
    --group "$RUNGROUP" \
    --wall-time "$TIMELIMIT" \
    --standard-output-file gtest.xml \
    --standard-error-file program.err \
    --out-meta program.meta -- \
    /judge/run  2>runguard.err

chroot_stop "$CHROOTDIR" merged

force_umount work/judge
force_umount work/judge_utils
force_umount work/run
force_umount merged
rm -rf run
rm -rf merged
rm -rf work
# RUNDIR 还剩下 program.meta, program.err, system.out, runguard.err 供评测客户端检查
# RUNDIR 由评测客户端删除

# Make sure that all feedback files are owned by the current
# user/group, so that we can append content.
$GAINROOT chown -R "$(id -un):" feedback
chmod -R go-w feedback

if [ ! -r program.meta ]; then
    error "'program.meta' is not readable"
fi

echo "Checking program run status" >> system.out
read_metadata program.meta

if grep '^time-result: .*timelimit' program.meta >/dev/null 2>&1; then
    echo "Time Limit Exceeded" >> system.out
    echo "$resource_usage" >> system.out
    cleanexit ${E_TIME_LIMIT:-1}
fi

if grep -E '^output-truncated: ([a-z]+,)*stdout(,[a-z]+)*' program.meta >/dev/null 2>&1; then
    echo "Output Limit Exceeded" >> system.out
    echo "$resource_usage" >> system.out
    cleanexit ${E_OUTPUT_LIMIT:-1}
fi

runcheck python3 "$PROGNAME/convert.py" gtest.xml feedback/report.txt 2>feedback/judgemessage.txt
case $exitcode in
    0)
        echo "Accepted" >> system.out
        echo "$resource_usage" >> system.out
        cleanexit ${E_ACCEPTED:-1}
        ;;
    1)
        echo "Wrong Answer" >> system.out
        echo "$resource_usage" >> system.out
        cleanexit ${E_WRONG_ANSWER:-1}
        ;;
    *)
        echo "Comparing failed with exitcode $exitcode" >> system.out
        cleanexit ${E_COMPARE_ERROR:-1}
        ;;
esac
