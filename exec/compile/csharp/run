#!/bin/bash

# C# compile wrapper-script for 'compile.sh'.
# See that script for syntax and more info.
#
# This script byte-compiles with the MSBuild toolchain and generates
# a shell script to run it with the dotnet CLI code generator later.
#
# This script requires dotnet-sdk to be installed in the chroot.

DEST="$1" ; shift
MAINSOURCE="$1"
FRAMEWORK="netcoreapp2.2"

DESTCLI="${DEST}.dll"

SOURCEDIR="${MAINSOURCE%/*}"
[ "$SOURCEDIR" = "$MAINSOURCE" ] && SOURCEDIR='.'

# Byte-compile:
# Add -d:ONLINE_JUDGE,DOMJUDGE below if you want to make it easier for teams to
# do local debugging.

# dotnet 编译器需要一个 HOME 环境变量
mkdir /tmp/home
export HOME=/tmp/home
cat > ${SOURCEDIR}/${DEST}.csproj << EOF
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <NullableContextOptions>enable</NullableContextOptions>
    <Nullable>enable</Nullable>
    <EnableDefaultCompileItems>true</EnableDefaultCompileItems>
    <LangVersion>preview</LangVersion>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
EOF
echo \<TargetFramework\>${FRAMEWORK}\</TargetFramework\> >> ${SOURCEDIR}/${DEST}.csproj
cat >> ${DEST}.csproj << EOF
  </PropertyGroup>
</Project>
EOF

dotnet publish -c Release -o .
EXITCODE=$?
[ "$EXITCODE" -ne 0 ] && exit $EXITCODE

# Check for output file:
if [ ! -f "$DESTCLI" ]; then
	echo "Error: byte-compiled file '$DESTCLI' not found."
	exit 1
fi

# Write executing script, executes dotnet on generated CLI code:
cat > "$DEST" <<EOF
#!/bin/sh
# Generated shell-script to execute dotnet on CLI code.
# Detect dirname and change dir to prevent class not found errors.
if [ "\${0%/*}" != "\$0" ]; then
	cd "\${0%/*}"
fi

exec dotnet "$DESTCLI" "\$@"
EOF

chmod a+x "$DEST"

exit 0